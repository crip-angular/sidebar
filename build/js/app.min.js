angular.module("crip.tree-view.templates",[]).run(["$templateCache",function(e){e.put("/crip/tree-view/node.html",'<i class="fa fa-folder fa-lg" ng-if="node.type == \'dir\'"></i>\n<i class="fa fa-file-o fa-lg" ng-if="node.type == \'file\'"></i>\n<a href="#">{{ node.name }}</a>\n<ul ng-if="node.type == \'dir\' && node.children">\n    <li class="{{ node.type }}" ng-repeat="node in node.children" ng-include="\'/crip/tree-view/node.html\'"></li>\n</ul>\n'),e.put("/crip/tree-view/tree.html",'<ul class="tree">\n    <li class="{{ node.type }}" ng-repeat="node in tree" ng-include="\'/crip/tree-view/node.html\'"></li>\n</ul>\n')}]),function(e,n){"use strict";n.treeView=e.module("crip.tree-view",["crip.tree-view.templates"])}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function i(n,i){function t(n,i,t,r){i.on("click",function(n){var i="LI"==n.target.tagName?e.element(n.target):e.element(n.target.parentNode);i.hasClass("dir")&&(i.find("i").eq(0).toggleClass("fa-folder fa-folder-open"),i.find("ul").eq(0).toggleClass("opened"))})}return{restrict:"A",scope:{tree:"=cripTree"},templateUrl:"/crip/tree-view/tree.html",link:t}}n.treeView.directive("cripTree",i),i.$inject=["$log","$document"]}(angular,window.crip);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zb3VyY2UvdGVtcGxhdGVzL3RlbXBsYXRlcy5qcyIsIi9zb3VyY2UvYXNzZXRzL2pzL3RyZWUtdmlldy5tb2R1bGUuanMiLCIvc291cmNlL2Fzc2V0cy9qcy9kaXJlY3RpdmVzL3RyZWUuanMiXSwibmFtZXMiOlsiYW5ndWxhciIsIm1vZHVsZSIsInJ1biIsIiR0ZW1wbGF0ZUNhY2hlIiwicHV0IiwibmciLCJjcmlwIiwidHJlZVZpZXciLCJ3aW5kb3ciLCJ0cmVlIiwiJGxvZyIsIiRkb2N1bWVudCIsImxpbmsiLCJzY29wZSIsImVsZW1lbnQiLCJhdHRyIiwiY3RybHMiLCJvbiIsImUiLCJsaSIsInRhcmdldCIsInRhZ05hbWUiLCJwYXJlbnROb2RlIiwiaGFzQ2xhc3MiLCJmaW5kIiwiZXEiLCJ0b2dnbGVDbGFzcyIsInJlc3RyaWN0IiwidGVtcGxhdGVVcmwiLCJkaXJlY3RpdmUiLCIkaW5qZWN0Il0sIm1hcHBpbmdzIjoiQUFBQUEsUUFBQUMsT0FBQSwrQkFBQUMsS0FBQSxpQkFBQSxTQUFBQyxHQUFBQSxFQUFBQyxJQUFBLDRCQUFBLHVWQUNBRCxFQUFBQyxJQUFBLDRCQUFBLDRJQ0RBLFNBQUFDLEVBQUFDLEdBRUEsWUFFQUEsR0FBQUMsU0FBQUYsRUFBQUosT0FBQSxrQkFDQSw4QkFHQUQsUUFBQVEsT0FBQUYsT0FBQUUsT0FBQUYsVUNSQSxTQUFBRCxFQUFBQyxHQUVBLFlBV0EsU0FBQUcsR0FBQUMsRUFBQUMsR0FlQSxRQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBRixFQUFBRyxHQUFBLFFBQUEsU0FBQUMsR0FDQSxHQUFBQyxHQUFBLE1BQUFELEVBQUFFLE9BQUFDLFFBQ0FoQixFQUFBUyxRQUFBSSxFQUFBRSxRQUNBZixFQUFBUyxRQUFBSSxFQUFBRSxPQUFBRSxXQUNBSCxHQUFBSSxTQUFBLFNBQ0FKLEVBQUFLLEtBQUEsS0FBQUMsR0FBQSxHQUFBQyxZQUFBLDRCQUNBUCxFQUFBSyxLQUFBLE1BQUFDLEdBQUEsR0FBQUMsWUFBQSxhQXBCQSxPQUNBQyxTQUFBLElBQ0FkLE9BQ0FKLEtBQUEsYUFFQW1CLFlBQUEsNEJBQ0FoQixLQUFBQSxHQWpCQU4sRUFBQUMsU0FDQXNCLFVBQUEsV0FBQXBCLEdBRUFBLEVBQUFxQixTQUFBLE9BQUEsY0FtQ0E5QixRQUFBUSxPQUFBRiIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoXCJjcmlwLnRyZWUtdmlldy50ZW1wbGF0ZXNcIiwgW10pLnJ1bihbXCIkdGVtcGxhdGVDYWNoZVwiLCBmdW5jdGlvbigkdGVtcGxhdGVDYWNoZSkgeyR0ZW1wbGF0ZUNhY2hlLnB1dChcIi9jcmlwL3RyZWUtdmlldy9ub2RlLmh0bWxcIixcIjxpIGNsYXNzPVxcXCJmYSBmYS1mb2xkZXIgZmEtbGdcXFwiIG5nLWlmPVxcXCJub2RlLnR5cGUgPT0gXFwnZGlyXFwnXFxcIj48L2k+XFxuPGkgY2xhc3M9XFxcImZhIGZhLWZpbGUtbyBmYS1sZ1xcXCIgbmctaWY9XFxcIm5vZGUudHlwZSA9PSBcXCdmaWxlXFwnXFxcIj48L2k+XFxuPGEgaHJlZj1cXFwiI1xcXCI+e3sgbm9kZS5uYW1lIH19PC9hPlxcbjx1bCBuZy1pZj1cXFwibm9kZS50eXBlID09IFxcJ2RpclxcJyAmJiBub2RlLmNoaWxkcmVuXFxcIj5cXG4gICAgPGxpIGNsYXNzPVxcXCJ7eyBub2RlLnR5cGUgfX1cXFwiIG5nLXJlcGVhdD1cXFwibm9kZSBpbiBub2RlLmNoaWxkcmVuXFxcIiBuZy1pbmNsdWRlPVxcXCJcXCcvY3JpcC90cmVlLXZpZXcvbm9kZS5odG1sXFwnXFxcIj48L2xpPlxcbjwvdWw+XFxuXCIpO1xuJHRlbXBsYXRlQ2FjaGUucHV0KFwiL2NyaXAvdHJlZS12aWV3L3RyZWUuaHRtbFwiLFwiPHVsIGNsYXNzPVxcXCJ0cmVlXFxcIj5cXG4gICAgPGxpIGNsYXNzPVxcXCJ7eyBub2RlLnR5cGUgfX1cXFwiIG5nLXJlcGVhdD1cXFwibm9kZSBpbiB0cmVlXFxcIiBuZy1pbmNsdWRlPVxcXCJcXCcvY3JpcC90cmVlLXZpZXcvbm9kZS5odG1sXFwnXFxcIj48L2xpPlxcbjwvdWw+XFxuXCIpO31dKTsiLCIoZnVuY3Rpb24gKG5nLCBjcmlwKSB7XG5cdFxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGNyaXAudHJlZVZpZXcgPSBuZy5tb2R1bGUoJ2NyaXAudHJlZS12aWV3JywgW1xuXHRcdCdjcmlwLnRyZWUtdmlldy50ZW1wbGF0ZXMnXG4gICAgXSk7XG5cbn0pKGFuZ3VsYXIsIHdpbmRvdy5jcmlwIHx8ICh3aW5kb3cuY3JpcCA9IHt9KSk7XG4iLCIoZnVuY3Rpb24gKG5nLCBjcmlwKSB7ICBcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGNyaXAudHJlZVZpZXdcbiAgICAgICAgLmRpcmVjdGl2ZSgnY3JpcFRyZWUnLCB0cmVlKTtcblxuICAgIHRyZWUuJGluamVjdCA9IFsnJGxvZycsICckZG9jdW1lbnQnXTtcblxuICAgIC8qKlxuICAgICAqIFRyZWUgZGlyZWN0aXZlXG4gICAgICpcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmVlKCRsb2csICRkb2N1bWVudCkge1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgICAgICB0cmVlOiAnPWNyaXBUcmVlJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL2NyaXAvdHJlZS12aWV3L3RyZWUuaHRtbCcsXG4gICAgICAgICAgICBsaW5rOiBsaW5rXG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExpbmtcbiAgICAgICAgICpcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIsIGN0cmxzKSB7XG4gICAgICAgICAgICBlbGVtZW50Lm9uKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7ICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgbGkgPSAoZS50YXJnZXQudGFnTmFtZSA9PSAnTEknKVxuICAgICAgICAgICAgICAgICAgICA/IG5nLmVsZW1lbnQoZS50YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgIDogbmcuZWxlbWVudChlLnRhcmdldC5wYXJlbnROb2RlKTtcbiAgICAgICAgICAgICAgICBpZiAobGkuaGFzQ2xhc3MoJ2RpcicpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpLmZpbmQoJ2knKS5lcSgwKS50b2dnbGVDbGFzcygnZmEtZm9sZGVyIGZhLWZvbGRlci1vcGVuJyk7XG4gICAgICAgICAgICAgICAgICAgIGxpLmZpbmQoJ3VsJykuZXEoMCkudG9nZ2xlQ2xhc3MoJ29wZW5lZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn0pIChhbmd1bGFyLCB3aW5kb3cuY3JpcCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
