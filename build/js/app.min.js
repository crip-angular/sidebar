angular.module("crip.treeView.templates",[]).run(["$templateCache",function(e){e.put("/crip/tree-view/node.html",'<i class="fa fa-folder fa-lg" ng-if="node.type == \'dir\'"></i>\n<i class="fa fa-file-o fa-lg" ng-if="node.type == \'file\'"></i>\n{{ node.name }}\n<ul ng-if="node.type == \'dir\' && node.children">\n    <li class="{{ node.type }}" ng-repeat="node in node.children" ng-include="\'/crip/tree-view/node.html\'"></li>\n</ul>\n'),e.put("/crip/tree-view/tree.html",'<ul class="tree" ng-controller="TreeController">\n    <li class="{{ node.type }}" ng-repeat="node in tree" ng-include="\'/crip/tree-view/node.html\'"></li>\n</ul>\n')}]),function(e,n){"use strict";n.treeView=e.module("crip.tree-view",["crip.treeView.templates"])}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function t(e,n){n.get("demo/filesystem.json").then(function(n){e.tree=n.data.filesystem})}n.treeView.controller("TreeController",t),t.$inject=["$scope","$http"]}(angular,window.crip||(window.crip={})),function(e,n){"use strict";function t(e,n){function t(e,n,t){}return{restrict:"E",templateUrl:"/crip/tree-view/tree.html",link:t}}n.treeView.directive("tree",t),t.$inject=["$log","$document"]}(angular,window.crip);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zb3VyY2UvdGVtcGxhdGVzL3RlbXBsYXRlcy5qcyIsIi9zb3VyY2UvYXNzZXRzL2pzL3RyZWUtdmlldy5tb2R1bGUuanMiLCIvc291cmNlL2Fzc2V0cy9qcy9jb250cm9sbGVycy9UcmVlQ29udHJvbGxlci5qcyIsIi9zb3VyY2UvYXNzZXRzL2pzL2RpcmVjdGl2ZXMvdHJlZS5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwibW9kdWxlIiwicnVuIiwiJHRlbXBsYXRlQ2FjaGUiLCJwdXQiLCJuZyIsImNyaXAiLCJ0cmVlVmlldyIsIndpbmRvdyIsIlRyZWVDb250cm9sbGVyIiwiJHNjb3BlIiwiJGh0dHAiLCJnZXQiLCJ0aGVuIiwicmVzcG9uc2UiLCJ0cmVlIiwiZGF0YSIsImZpbGVzeXN0ZW0iLCJjb250cm9sbGVyIiwiJGluamVjdCIsIiRsb2ciLCIkZG9jdW1lbnQiLCJsaW5rIiwic2NvcGUiLCJlbGVtZW50IiwiYXR0ciIsInJlc3RyaWN0IiwidGVtcGxhdGVVcmwiLCJkaXJlY3RpdmUiXSwibWFwcGluZ3MiOiJBQUFBQSxRQUFBQyxPQUFBLDhCQUFBQyxLQUFBLGlCQUFBLFNBQUFDLEdBQUFBLEVBQUFDLElBQUEsNEJBQUEsdVVBQ0FELEVBQUFDLElBQUEsNEJBQUEsMktDREEsU0FBQUMsRUFBQUMsR0FFQSxZQUVBQSxHQUFBQyxTQUFBRixFQUFBSixPQUFBLGtCQUNBLDZCQUdBRCxRQUFBUSxPQUFBRixPQUFBRSxPQUFBRixVQ1JBLFNBQUFELEVBQUFDLEdBQ0EsWUFXQSxTQUFBRyxHQUFBQyxFQUFBQyxHQUVBQSxFQUFBQyxJQUFBLHdCQUFBQyxLQUFBLFNBQUFDLEdBQ0FKLEVBQUFLLEtBQUFELEVBQUFFLEtBQUFDLGFBWkFYLEVBQUFDLFNBQ0FXLFdBQUEsaUJBQUFULEdBRUFBLEVBQUFVLFNBQUEsU0FBQSxVQWFBbkIsUUFBQVEsT0FBQUYsT0FBQUUsT0FBQUYsVUNuQkEsU0FBQUQsRUFBQUMsR0FFQSxZQVFBLFNBQUFTLEdBQUFLLEVBQUFDLEdBUUEsUUFBQUMsR0FBQUMsRUFBQUMsRUFBQUMsSUFOQSxPQUNBQyxTQUFBLElBQ0FDLFlBQUEsNEJBQ0FMLEtBQUFBLEdBWEFoQixFQUFBQyxTQUNBcUIsVUFBQSxPQUFBYixHQUVBQSxFQUFBSSxTQUFBLE9BQUEsY0FrQkFuQixRQUFBUSxPQUFBRiIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiYW5ndWxhci5tb2R1bGUoXCJjcmlwLnRyZWVWaWV3LnRlbXBsYXRlc1wiLCBbXSkucnVuKFtcIiR0ZW1wbGF0ZUNhY2hlXCIsIGZ1bmN0aW9uKCR0ZW1wbGF0ZUNhY2hlKSB7JHRlbXBsYXRlQ2FjaGUucHV0KFwiL2NyaXAvdHJlZS12aWV3L25vZGUuaHRtbFwiLFwiPGkgY2xhc3M9XFxcImZhIGZhLWZvbGRlciBmYS1sZ1xcXCIgbmctaWY9XFxcIm5vZGUudHlwZSA9PSBcXCdkaXJcXCdcXFwiPjwvaT5cXG48aSBjbGFzcz1cXFwiZmEgZmEtZmlsZS1vIGZhLWxnXFxcIiBuZy1pZj1cXFwibm9kZS50eXBlID09IFxcJ2ZpbGVcXCdcXFwiPjwvaT5cXG57eyBub2RlLm5hbWUgfX1cXG48dWwgbmctaWY9XFxcIm5vZGUudHlwZSA9PSBcXCdkaXJcXCcgJiYgbm9kZS5jaGlsZHJlblxcXCI+XFxuICAgIDxsaSBjbGFzcz1cXFwie3sgbm9kZS50eXBlIH19XFxcIiBuZy1yZXBlYXQ9XFxcIm5vZGUgaW4gbm9kZS5jaGlsZHJlblxcXCIgbmctaW5jbHVkZT1cXFwiXFwnL2NyaXAvdHJlZS12aWV3L25vZGUuaHRtbFxcJ1xcXCI+PC9saT5cXG48L3VsPlxcblwiKTtcbiR0ZW1wbGF0ZUNhY2hlLnB1dChcIi9jcmlwL3RyZWUtdmlldy90cmVlLmh0bWxcIixcIjx1bCBjbGFzcz1cXFwidHJlZVxcXCIgbmctY29udHJvbGxlcj1cXFwiVHJlZUNvbnRyb2xsZXJcXFwiPlxcbiAgICA8bGkgY2xhc3M9XFxcInt7IG5vZGUudHlwZSB9fVxcXCIgbmctcmVwZWF0PVxcXCJub2RlIGluIHRyZWVcXFwiIG5nLWluY2x1ZGU9XFxcIlxcJy9jcmlwL3RyZWUtdmlldy9ub2RlLmh0bWxcXCdcXFwiPjwvbGk+XFxuPC91bD5cXG5cIik7fV0pOyIsIihmdW5jdGlvbiAobmcsIGNyaXApIHtcblx0XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgY3JpcC50cmVlVmlldyA9IG5nLm1vZHVsZSgnY3JpcC50cmVlLXZpZXcnLCBbXG5cdFx0J2NyaXAudHJlZVZpZXcudGVtcGxhdGVzJ1xuICAgIF0pO1xuXG59KShhbmd1bGFyLCB3aW5kb3cuY3JpcCB8fCAod2luZG93LmNyaXAgPSB7fSkpO1xuIiwiKGZ1bmN0aW9uIChuZywgY3JpcCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGNyaXAudHJlZVZpZXdcbiAgICAgICAgLmNvbnRyb2xsZXIoJ1RyZWVDb250cm9sbGVyJywgVHJlZUNvbnRyb2xsZXIpO1xuXG4gICAgVHJlZUNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRodHRwJ107XG5cbiAgICAvKipcbiAgICAgKiBUcmVlIENvbnRyb2xsZXJcbiAgICAgKlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFRyZWVDb250cm9sbGVyKCRzY29wZSwgJGh0dHApIHtcbiAgICAgICAgLy8gTG9hZHMgZmlsZXN5c3RlbSB0cmVlIGFzIEpTT05cbiAgICAgICAgJGh0dHAuZ2V0KCdkZW1vL2ZpbGVzeXN0ZW0uanNvbicpLnRoZW4oZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICRzY29wZS50cmVlID0gcmVzcG9uc2UuZGF0YS5maWxlc3lzdGVtO1xuICAgICAgICB9KTtcbiAgICB9XG5cbn0pKGFuZ3VsYXIsIHdpbmRvdy5jcmlwIHx8ICh3aW5kb3cuY3JpcCA9IHt9KSk7XG4iLCIoZnVuY3Rpb24gKG5nLCBjcmlwKSB7ICBcblxuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGNyaXAudHJlZVZpZXdcbiAgICAgICAgLmRpcmVjdGl2ZSgndHJlZScsIHRyZWUpO1xuXG4gICAgdHJlZS4kaW5qZWN0ID0gWyckbG9nJywgJyRkb2N1bWVudCddO1xuXG5cbiAgICBmdW5jdGlvbiB0cmVlKCRsb2csICRkb2N1bWVudCkge1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9jcmlwL3RyZWUtdmlldy90cmVlLmh0bWwnLFxuICAgICAgICAgICAgbGluazogbGlua1xuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHIpIHtcblxuXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG59KShhbmd1bGFyLCB3aW5kb3cuY3JpcCk7XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
